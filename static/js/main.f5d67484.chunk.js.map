{"version":3,"sources":["Components/Form/Form.jsx","App.js","reportWebVitals.js","index.js"],"names":["Form","useState","isSumbitButtonEnabled","setSubmitButton","values","setValues","onInputChange","onNameChange","e","copyValues","name","target","value","validate","onEmailChange","email","onTelephoneNumberChange","number","digitalsLength","replace","length","test","onLanguageChange","language","innerText","setDropdown","onTermsChange","termsOfUse","checked","errors","regexPatterns","useEffect","isError","key","isDropdownOpen","className","href","htmlFor","type","id","placeholder","onChange","readOnly","onClick","onBlur","setTimeout","disabled","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5d67484.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './Form.css';\n\nconst Form = () => {\n    const [isSumbitButtonEnabled, setSubmitButton] = useState(false);\n    const [values, setValues] = useState({});\n    const onInputChange = {\n        onNameChange(e) {\n            let copyValues = {\n                ...values,\n                name: e.target.value\n            }\n            let nameError = validate(copyValues).name\n            if (!nameError || e.target.value === '') {\n                setValues(copyValues)\n            }\n        },\n        onEmailChange(e) {\n            setValues({\n                ...values,\n                email: e.target.value\n            });\n        },\n        onTelephoneNumberChange(e) {\n            const number = e.target.value\n            const digitalsLength = number.replace(/\\D+/g,'').length\n            if((/^[\\d\\(\\)+-]{0,}$/.test(number) || number === '') && digitalsLength <= 11) {\n                setValues({\n                    ...values,\n                    number\n                });\n            }\n        },\n        onLanguageChange(e) {\n            setValues({\n                ...values,\n                language: e.target.innerText\n            });\n            setDropdown(false);\n        },\n        onTermsChange(e) {\n            setValues({\n                ...values,\n                termsOfUse: e.target.checked\n            });\n        }\n    };\n    const validate = (values) => {\n        const errors = {};\n        const regexPatterns = {\n            email: /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/,\n            name: /^[a-zA-Zа-яА-Я \\-]{1,}$/,\n            number: /^(\\+)?([-()+]?\\d[-()+]?){11,}(\\s*)?$/\n        }\n        if(!regexPatterns.email.test(values.email)) {\n            errors.email = \"Введено некорректное значение\";\n        }\n        if(!regexPatterns.name.test(values.name)) {\n            errors.name = \"Введено некорректное значение\";\n        } \n        if(!regexPatterns.number.test(values.number)) {\n            errors.number = \"Введено некорректное значение\";\n        }\n        if (values.number && values.number.replace(/\\D+/g,'').length != 11) {\n            errors.number = \"Введено некорректное значение\";\n        }\n        if(!values.language) {\n            errors.language = \"Не выбран язык\";\n        }\n        if(!values.termsOfUse) {\n            errors.termsOfUse = \"Не приняты условия соглашения\";\n        }\n        return errors;\n    };\n    \n    useEffect(() => {\n        const errors = validate(values);\n        let isError = false\n        for (let key in errors) {\n            isError = true\n        }\n        if (values.name && !isError) {\n            setSubmitButton(true)\n        } else {\n            setSubmitButton(false)\n        }\n    }, [values]);\n   \n    const [isDropdownOpen, setDropdown] = useState(false);\n    return <form className=\"form\">\n        <div className=\"form__header\">\n            <div className=\"form__title\">\n                Регистрация\n            </div>\n            <div className=\"form__is-account\">\n                Уже есть аккаунт?\n                <a href=\"#\" className=\"form__link\"> Войти</a>\n            </div>\n        </div>\n        <div className=\"form__body\">\n            <div>\n                <label className=\"form__label\" htmlFor=\"fullName\">Имя</label>\n                <input className=\"form__input\" type=\"text\" id=\"FullName\" \n                    placeholder=\"Введите Ваше имя\"\n                    value={values.name || ''} \n                    onChange={onInputChange.onNameChange}/>\n                <div className=\"form__message\">\n                    <div className=\"form__error\">\n                        {validate(values).name}\n                    </div>\n                </div>\n                \n            </div>\n            <div>\n                <label className=\"form__label\" htmlFor=\"email\">Email</label>\n                <input className=\"form__input\" type=\"email\" id=\"email\" \n                    placeholder=\"Введите ваш email\"\n                    value={values.email || ''}\n                    onChange={onInputChange.onEmailChange}/>\n                <div className=\"form__message\">\n                    <div className=\"form__error\">\n                        {values.email && validate(values).email}\n                    </div>\n                </div>\n            </div>\n            <div>\n                <label className=\"form__label\" htmlFor=\"telephoneNumber\">Номер телефона</label>\n                <input className=\"form__input\" type=\"text\" id=\"telephoneNumber\" \n                    placeholder=\"Введите номер телефона\"\n                    value={values.number || ''}\n                    onChange={onInputChange.onTelephoneNumberChange}/>\n                <div className=\"form__message\">\n                    <div className=\"form__error\">\n                        {values.number && validate(values).number}\n                    </div>\n                    \n                </div>\n            </div>\n            <div>\n                <label className=\"form__label\" htmlFor=\"language\">Язык</label>\n                <input className=\"form__input form__input_expand\" id=\"language\" \n                    placeholder=\"Язык\" readOnly\n                    onClick={() => setDropdown(true)}\n                    onBlur={() => setTimeout(setDropdown, 150, false)} \n                    value={values.language || ''}/>\n                <nav className={`language-dropdown ${isDropdownOpen && \"language-dropdown_open\"}`} >\n                    <ul className=\"language-dropdown__list\">\n                        <li onClick={onInputChange.onLanguageChange} \n                            className=\"language-dropdown__link\">Русский</li>\n                        <li onClick={onInputChange.onLanguageChange} \n                            className=\"language-dropdown__link\">Английский</li>\n                        <li onClick={onInputChange.onLanguageChange} \n                            className=\"language-dropdown__link\">Китайский</li>\n                        <li onClick={onInputChange.onLanguageChange} \n                            className=\"language-dropdown__link\">Испанский</li>\n                    </ul>\n                </nav>\n            </div>\n            <div>\n                <input className=\"form__checkbox\" type=\"checkbox\" id=\"termsOfUse\" \n                    onClick={onInputChange.onTermsChange}/>\n                <label className=\"form__label\" htmlFor=\"termsOfUse\">Принимаю <a href=\"#\" className=\"form__link\">условия</a> использования</label>\n                <div className=\"form__message\">\n                    <div className=\"form__error\">\n                        {(values.termsOfUse === false) && validate(values).termsOfUse}\n                    </div>\n                </div>\n            </div>\n            <button disabled={!isSumbitButtonEnabled} className=\"form__submit\">\n                Зарегистрироваться\n            </button>\n        </div>\n    </form>\n};\n\nexport default Form;\n\n","import './App.css';\nimport Form from './Components/Form/Form';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"app__form\"> \n        <Form />  \n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}